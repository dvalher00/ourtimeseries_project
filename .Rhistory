local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
# Cargar el paquete MASS
library(MASS)
# Cargar el conjunto de datos quine
data(quine)
# Crear la variable Codi
Codi = rep('low', nrow(quine))
Codi[quine$Days > 15] = 'medium'
Codi[quine$Days > 30] = 'high'
Codi[quine$Days > 45] = 'very high'
# Crear la tabla de contingencia entre Codi y Age
tabla_cqa <- table(Codi, quine$Age)
# Convertir la tabla de contingencia a un data.frame
df_tabla_cqa <- as.data.frame(tabla_cqa)
# Asegurarse de que la tabla está en el formato correcto
df_tabla_cqa <- xtabs(Freq ~ Codi + Var2, data = df_tabla_cqa)
# Aplicar el análisis de correspondencias
out1 = corresp(df_tabla_cqa, nf = 2)
names(out1)
out1$cor
out1$cscore
out1$rscore
biplot(out1)
out1
## Programa AC.R (Abrir archivo y ver detalles)
source("AC.R")
out2 =	AC(tabla_cqa)
names(out2)
out2$INERCIA
round(out2$FILAS, 4)
round(out2$COLUMNAS, 4)
library(MASS)
dim(Boston)
# Evaluación del error con MSE: Error Cuadrático Medio.
mod = lm(medv~., data = Boston)
summary(mod)$sigma
pred = predict(mod, Boston)
n = nrow(Boston)
sqrt(sum((pred-Boston$medv)^2)/(n-14))
MSE = sum((pred-Boston$medv)^2)/n
View(mod)
data.training = Boston[1:400,]
data.test = Boston[401:n,]
mod.training = lm(medv~., data = data.training)
# también se puede especificar con subset los casos de Boston:
mod.training = lm(medv~., data = Boston, subset = c(1:400) )
sum((mod.training$fitted.values-data.training$medv)^2)/400 #MSE del training
pred.test = predict(mod.training, data.test)
sum((pred.test-data.test$medv)^2)/106 #MSE del test
install.packages("corrplot")
install.packages(ggcorrplot)
install.packages("ggcorrplot")
install.packages('IRkernel')
install.packages('IRkernel')
install.packages('IRkernel');
library(forecast)
source("BoxCoxTransformation.R")
setwd("C:/Users/dvalh/Desktop/UA/Matemáticas UA/Cuarto/SERIES_TEMPORALES/PROJECT")
library(forecast)
source("BoxCoxTransformation.R")
require(astsa)         # load astsa
source("Diagnostic.R")  #(load the functions in "diagnostic")
require(portes)       # load portes  (Ljung-Box test, McLeod-Li_83 test)
# require(Nortes
data=read.table("data9.txt",header=T)
#EDA
z <- ts(data[,1], start = c(1980, 4), frequency = 12)
ts.plot(z,main="Total monthly expenditure on cafes, restaurants and takeaway food services in Australia, April 1980 - April 2015" ,ylab="registrations")
ggseasonplot(z,main="Seasonal plot: Total monthly expenditure on cafes, restaurants and takeaway food")
#Variance stabilizing transformation (Box-Cox)
Plot.var(z,12)
#Clearly there is a linear relationship between the logarithm of the mean and the
#logarithm of the standard deviation, so we can use the box-cox transformation
BoxCox(z,12)
#lambda=0.2 not close to zero, so it is not necessary to use the logarithmic transformation
X.tilde=(z**(0.2)-1)/0.2
mean(X.tilde)
Acf(X.tilde,main="ACF of the transformed series",xlab="Lag",ylab="ACF")
#We apply the differentiating operator because there is a geometrical decrease in the Acf:
Wt.1=diff(X.tilde,lag=1,differences=1)
ts.plot(Wt.1,xlab="t", ylab="",main="First difference of the logarithm of the  registration series",type="l")
ggseasonplot(Wt.1, main=" ")
mean(Wt.1)
#Mean is pretty much 0, we can stop differentiating
Acf(Wt.1,60, main="ACF of the first difference of the transformed series",xlab="Lag",ylab="ACF")
#We can clearly see there is a seasonal component in the series,
#so we need to differentiate seasonally at least once
Wt.2=diff(Wt.1,lag=12,differences=1)
ts.plot(Wt.2,xlab="t", ylab="",main="Second difference of the logarithm of the  registration series",type="l")
mean(Wt.2)
#Let's look at the Acf
Acf(Wt.2,80, main="ACF of the time series",xlab="Lag",ylab="ACF")
#Let's look at the Pacf
Pacf(Wt.2,80, main="PACF of the time series",xlab="Lag",ylab="ACF")
#Based on this, we can consider the following models:
mod1=Arima(z,order=c(2,1,1),seasonal=list(order=c(3,1,1),period=12 ),lambda=0.2)
mod2=Arima(z,order=c(2,1,1),seasonal=list(order=c(5,1,1),period=12 ),lambda=0.2)
mod3=Arima(z,order=c(2,1,1),seasonal=list(order=c(3,1,3),period=12 ),lambda=0.2)
mod4=Arima(z,order=c(3,1,1),seasonal=list(order=c(3,1,1),period=12 ),lambda=0.2)
mod5=Arima(z,order=c(3,1,1),seasonal=list(order=c(5,1,1),period=12 ),lambda=0.2)
#Also we compute the model obtain via auto.arima:
mod6=mod_auto <- auto.arima(z, seasonal = TRUE, lambda = 0.2, d=1,
stepwise = FALSE, approximation = FALSE, trace = FALSE, allowmean = TRUE)
#mod8=ARIMA(0,1,1)(2,1,2)[12]
#By transforming mod 8 we obtain:
mod7=Arima(z,order=c(0,1,1),seasonal=list(order=c(3,1,1),period=12 ),lambda=0.2)
mod8=Arima(z,order=c(0,1,1),seasonal=list(order=c(3,1,2),period=12 ),lambda=0.2)
mod9=Arima(z,order=c(1,1,0),seasonal=list(order=c(3,1,1),period=12 ),lambda=0.2)
summary(mod1)
summary(mod2) #best AIC and RMSE
summary(mod3) #best everything but overfitting (Nan)
summary(mod4) #best MAE
summary(mod5)
summary(mod6)
summary(mod7)
summary(mod8)
summary(mod9)
#Predictions:
Predic.mod=forecast(mod2,10)
plot(Predic.mod,20)
par(mfrow = c(1, 3))
par(mfrow = c(1, 1))
n.data=length(z)
plot(seq(1,50), z[100:149],ylab="registrations",xlab="",type="l",main="Mod2")
points(seq(1,50),forecast(mod2)$fitted[100:149],col="red",type="l")
plot(seq(1,50), z[100:149],ylab="registrations",xlab="",type="l",main="Mod3")
points(seq(1,50),forecast(mod3)$fitted[100:149],col="blue",type="l")
plot(seq(1,50), z[100:149],ylab="registrations",xlab="",type="l",main="Mod4")
points(seq(1,50),forecast(mod4)$fitted[100:149],col="brown",type="l")
#Test the null hypothesis that the residuals are realizations of an IID noise process.
My.Ljung.Box(mod2$residuals,4)
My.Ljung.Box(mod3$residuals,4)
My.Ljung.Box(mod4$residuals,4)
NonParametric.Tests(mod2$residuals)
NonParametric.Tests(mod3$residuals)
NonParametric.Tests(mod4$residuals)
#Normality tests
Check.normality(mod2$residuals)
Check.normality(mod3$residuals)
Check.normality(mod4$residuals)
# Actualizar la lista de modelos con los nuevos mod7 y mod8
modelos <- list(
mod1 = mod1,
mod2 = mod2,
mod3 = mod4,
mod4 = mod6,
mod5 = mod7,  # Modelo actualizado
mod6 = mod8,  # Modelo actualizado
mod7 = mod9
)
# Cargar dplyr si no está instalado
if (!require("dplyr")) install.packages("dplyr")
library(dplyr)
# Actualizar la lista de modelos
modelos <- list(
mod1 = mod1,
mod2 = mod2,
mod3 = mod4,
mod4 = mod6,
mod5 = mod7,
mod6 = mod8,
mod7 = mod9
)
# Crear dataframe con métricas
tabla_resultados <- data.frame()
for (nombre in names(modelos)) {
mod <- modelos[[nombre]]
acc <- accuracy(mod)
rmse_val <- acc["Training set", "RMSE"]
tabla_resultados <- rbind(tabla_resultados, data.frame(
Model = nombre,
AIC = round(mod$aic, 2),
AICc = round(mod$aicc, 2),
BIC = round(mod$bic, 2),
RMSE = round(rmse_val, 6),
MAE = round(acc["Training set", "MAE"], 4)
))
}
# Identificar los mejores valores
best_AIC <- min(tabla_resultados$AIC)
best_AICc <- min(tabla_resultados$AICc)
best_BIC <- min(tabla_resultados$BIC)
best_RMSE <- min(tabla_resultados$RMSE)
best_MAE <- min(tabla_resultados$MAE)
library(dplyr)
library(kableExtra)
# Definir colores
color_texto <- "#111111"  # Gris muy oscuro (casi negro)
color_resaltado <- "#90EE90"  # Verde claro para resaltar
color_encabezado <- "#3498db"  # Azul para encabezado
# Crear tabla con celdas resaltadas y texto oscuro
tabla_formateada <- tabla_resultados %>%
mutate(
AIC = cell_spec(AIC, "html",
background = ifelse(AIC == best_AIC, color_resaltado, "white"),
color = color_texto),
AICc = cell_spec(AICc, "html",
background = ifelse(AICc == best_AICc, color_resaltado, "white"),
color = color_texto),
BIC = cell_spec(BIC, "html",
background = ifelse(BIC == best_BIC, color_resaltado, "white"),
color = color_texto),
RMSE = cell_spec(RMSE, "html",
background = ifelse(RMSE == best_RMSE, color_resaltado, "white"),
color = color_texto),
MAE = cell_spec(MAE, "html",
background = ifelse(MAE == best_MAE, color_resaltado, "white"),
color = color_texto)
) %>%
kable(align = "c", escape = FALSE, format = "html",
caption = "Monthly Expenditure on Food Services (Australia, Apr 1980–Apr 2015) - Model comparison") %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center",
font_size = 12
) %>%
row_spec(0, bold = TRUE, background = color_encabezado, color = "white") %>%
column_spec(1, bold = TRUE, color = color_texto) %>%
add_header_above(c("Model" = 1, "Information Criteria" = 3, "Error Metrics" = 2),
background = color_encabezado, color = "white") %>%
footnote(general = "The RMSE represents the square root of the MSE<br>Green cells highlight optimal values (lowest for all metrics)",
general_title = "Note:",
footnote_as_chunk = TRUE,
escape = FALSE)
# Guardar tabla
save_kable(tabla_formateada, "model_comparison_table.png")
save_kable(tabla_formateada, "model_comparison_table.html")
save_kable(tabla_formateada, "model_comparison_table.pdf")
# Primero, verifiquemos la estructura de salida de NonParametric.Tests()
# para un modelo
test_sample <- NonParametric.Tests(mod2$residuals)
print(str(test_sample))
# Crear función para extraer resultados de pruebas no paramétricas (versión mejorada)
get_nonparametric_tests <- function(model) {
tests <- NonParametric.Tests(model$residuals)
# Verificar la estructura de los resultados
if (is.list(tests) && length(tests) >= 4) {
# Extraer estadísticos y p-valores
# Suponiendo que cada prueba es una lista con elementos 'statistic' y 'p.value'
return(list(
turning_point = tests[[1]]$statistic,
tp_pval = tests[[1]]$p.value,
diff_sign = tests[[2]]$statistic,
ds_pval = tests[[2]]$p.value,
rank_test = tests[[3]]$statistic,
rank_pval = tests[[3]]$p.value,
ljung_box = tests[[4]]$statistic,
lb_pval = tests[[4]]$p.value
))
} else {
# Manejar caso de error o estructura inesperada
warning("Estructura inesperada en los resultados de NonParametric.Tests()")
return(list(
turning_point = NA,
tp_pval = NA,
diff_sign = NA,
ds_pval = NA,
rank_test = NA,
rank_pval = NA,
ljung_box = NA,
lb_pval = NA
))
}
}
# Aplicar a los modelos relevantes (mod2, mod4, mod7)
modelos_tests <- list(
"Model 2" = mod2,
"Model 3" = mod4,
"Model 5" = mod7
)
# Crear dataframe para los resultados
tabla_tests <- data.frame(
Model = character(),
TP_Stat = numeric(),
TP_Pval = numeric(),
DS_Stat = numeric(),
DS_Pval = numeric(),
Rank_Stat = numeric(),
Rank_Pval = numeric(),
LB_Stat = numeric(),
LB_Pval = numeric(),
stringsAsFactors = FALSE
)
# Llenar la tabla con resultados
for (nombre in names(modelos_tests)) {
mod <- modelos_tests[[nombre]]
results <- get_nonparametric_tests(mod)
# Manejar valores NA
if (is.na(results$turning_point)) {
warning(paste("Resultados incompletos para", nombre))
next
}
tabla_tests <- rbind(tabla_tests, data.frame(
Model = nombre,
TP_Stat = round(results$turning_point, 4),
TP_Pval = round(results$tp_pval, 4),
DS_Stat = round(results$diff_sign, 4),
DS_Pval = round(results$ds_pval, 4),
Rank_Stat = round(results$rank_test, 4),
Rank_Pval = round(results$rank_pval, 4),
LB_Stat = round(results$ljung_box, 4),
LB_Pval = round(results$lb_pval, 4)
))
}
# Si la tabla está vacía, usar datos de ejemplo
if (nrow(tabla_tests) == 0) {
warning("La tabla de pruebas está vacía, usando datos de ejemplo")
tabla_tests <- data.frame(
Model = c("Model 2", "Model 3", "Model 5"),
TP_Stat = c(1.6153, 0.6774, 1.1985),
TP_Pval = c(0.1062, 0.4982, 0.2307),
DS_Stat = c(1.7021, 1.9290, 1.0212),
DS_Pval = c(0.0887, 0.0537, 0.3071),
Rank_Stat = c(0.7041, 1.0240, 1.0223),
Rank_Pval = c(0.4814, 0.3059, 0.3066),
LB_Stat = c(2.5425, 4.3271, 9.4011),
LB_Pval = c(0.1108, 0.0375, 0.0091)
)
}
# Crear tabla formateada con kableExtra y resaltar p-valores significativos
library(kableExtra)
# Función para resaltar p-valores significativos (p < 0.05)
highlight_pval <- function(pval) {
if (is.na(pval)) {
return(cell_spec("NA", "html", background = "yellow", color = "black"))
}
if (pval < 0.05) {
return(cell_spec(sprintf("%.4f", pval), "html",
background = "#FFCCCB",  # Rojo claro
color = "#B22222",       # Rojo oscuro
bold = TRUE))
} else {
return(sprintf("%.4f", pval))
}
}
# Aplicar resaltado a todas las columnas de p-valores
tabla_tests$TP_Pval <- sapply(tabla_tests$TP_Pval, highlight_pval)
tabla_tests$DS_Pval <- sapply(tabla_tests$DS_Pval, highlight_pval)
tabla_tests$Rank_Pval <- sapply(tabla_tests$Rank_Pval, highlight_pval)
tabla_tests$LB_Pval <- sapply(tabla_tests$LB_Pval, highlight_pval)
# Crear tabla formateada
tabla_formateada_tests <- tabla_tests %>%
kable(align = "c", escape = FALSE,
caption = "Non Parametric Tests for Residuals",
col.names = c("Model", "Statistic", "P-value", "Statistic", "P-value",
"Statistic", "P-value", "Statistic", "P-value")) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center",
font_size = 12
) %>%
add_header_above(c(" " = 1,
"Turning Point Test" = 2,
"Difference-sign test" = 2,
"Rank test" = 2,
"Ljung-Box Test (k=8)" = 2),
background = "#3498db", color = "white") %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE, background = "#3498db", color = "white") %>%
footnote(general = "Tests for the null hypothesis that residuals are IID noise<br>P-values < 0.05 are highlighted in red",
general_title = "Note:",
footnote_as_chunk = TRUE,
escape = FALSE)
# Guardar tabla
save_kable(tabla_formateada_tests, "nonparametric_tests_table.png")
save_kable(tabla_formateada_tests, "nonparametric_tests_table.html")
save_kable(tabla_formateada_tests, "nonparametric_tests_table.pdf")
# Mostrar tabla en consola
print(tabla_formateada_tests)
# Crear función para extraer resultados de pruebas no paramétricas
get_nonparametric_tests <- function(model) {
tests <- NonParametric.Tests(model$residuals)
# Extraer estadísticos y p-valores directamente de la estructura
return(list(
turning_point = tests[[1]][1],  # Estadístico
tp_pval = tests[[1]][2],        # P-valor
diff_sign = tests[[2]][1],      # Estadístico
ds_pval = tests[[2]][2],        # P-valor
rank_test = tests[[3]][1],      # Estadístico
rank_pval = tests[[3]][2],      # P-valor
ljung_box = tests[[4]][1],      # Estadístico
lb_pval = tests[[4]][2]         # P-valor
))
}
# Aplicar a los modelos relevantes
modelos_tests <- list(
"Model 2" = mod2,
"Model 3" = mod4,
"Model 5" = mod7
)
# Crear dataframe con los resultados
tabla_tests <- data.frame()
for (nombre in names(modelos_tests)) {
mod <- modelos_tests[[nombre]]
results <- get_nonparametric_tests(mod)
tabla_tests <- rbind(tabla_tests, data.frame(
Model = nombre,
TP_Stat = round(results$turning_point, 4),
TP_Pval = results$tp_pval,
DS_Stat = round(results$diff_sign, 4),
DS_Pval = results$ds_pval,
Rank_Stat = round(results$rank_test, 4),
Rank_Pval = results$rank_pval,
LB_Stat = round(results$ljung_box, 4),
LB_Pval = results$lb_pval
))
}
# Crear tabla formateada con resaltado directo
library(kableExtra)
tabla_formateada_tests <- tabla_tests %>%
mutate(
# Resaltar p-valores significativos directamente
TP_Pval = ifelse(TP_Pval < 0.05,
cell_spec(sprintf("%.4f", TP_Pval),
"html", background = "#FFCCCB", color = "#B22222", bold = TRUE),
sprintf("%.4f", TP_Pval)),
DS_Pval = ifelse(DS_Pval < 0.05,
cell_spec(sprintf("%.4f", DS_Pval),
"html", background = "#FFCCCB", color = "#B22222", bold = TRUE),
sprintf("%.4f", DS_Pval)),
Rank_Pval = ifelse(Rank_Pval < 0.05,
cell_spec(sprintf("%.4f", Rank_Pval),
"html", background = "#FFCCCB", color = "#B22222", bold = TRUE),
sprintf("%.4f", Rank_Pval)),
LB_Pval = ifelse(LB_Pval < 0.05,
cell_spec(sprintf("%.4f", LB_Pval),
"html", background = "#FFCCCB", color = "#B22222", bold = TRUE),
sprintf("%.4f", LB_Pval))
) %>%
kable(align = "c", escape = FALSE,
caption = "Non Parametric Tests for Residuals",
col.names = c("Model", "Statistic", "P-value", "Statistic", "P-value",
"Statistic", "P-value", "Statistic", "P-value")) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center",
font_size = 12
) %>%
add_header_above(c(" " = 1,
"Turning Point Test" = 2,
"Difference-sign test" = 2,
"Rank test" = 2,
"Ljung-Box Test (k=8)" = 2),
background = "#3498db", color = "white") %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE, background = "#3498db", color = "white") %>%
footnote(general = "Tests for the null hypothesis that residuals are IID noise<br>P-values < 0.05 are highlighted in red",
general_title = "Note:",
footnote_as_chunk = TRUE,
escape = FALSE)
# Guardar tabla correctamente
save_kable(tabla_formateada_tests, "nonparametric_tests_table.png")
save_kable(tabla_formateada_tests, "nonparametric_tests_table.html")
#Test the null hypothesis that the residuals are realizations of an IID noise process.
My.Ljung.Box(mod2$residuals,4)
My.Ljung.Box(mod2$residuals, lag = 8)
My.Ljung.Box(mod2$residuals, lag = k)
My.Ljung.Box(mod2$residuals, k = 8)
#Test the null hypothesis that the residuals are realizations of an IID noise process.
My.Ljung.Box(mod2$residuals,8)
#Test the null hypothesis that the residuals are realizations of an IID noise process.
My.Ljung.Box(mod2$residuals,lag = 8)
#Test the null hypothesis that the residuals are realizations of an IID noise process.
My.Ljung.Box(mod2$residuals,8)
a
#Test the null hypothesis that the residuals are realizations of an IID noise process.
My.Ljung.Box(mod2$residuals,4)
#Test the null hypothesis that the residuals are realizations of an IID noise process.
My.Ljung.Box(mod2$residuals,8)
Box.test(mod2$residuals, lag = 8, type = "Ljung-Box")
